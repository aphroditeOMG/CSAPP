# Execution begins at address 0
        .pos 0
        irmovq stack,%rsp
        call main
        halt

# Array of Address
address:
	.quad	L0	
	.quad	L3
	.quad	L1
	.quad	L2
	.quad	L3
	.quad	L1

# Array of what to test
test:
	.quad	0x0
	.quad	0x0
	.quad	0x0
	.quad	0x0
	.quad	0x0
	.quad	0x0
	.quad	0x0
	.quad	0x0
	.quad	0x0
	.quad	0x0


main:
	irmovq 	$0, %rsi
	irmovq	$7, %r12
	irmovq	$1, %r11
	jmp	L9
L10:	
	call	switchv
jmploc:
	rrmovq	%rsi, %r10
	addq	%r10, %r10
	addq	%r10, %r10
	addq	%r10, %r10
	rmmovq	%rax, test(%r10)
	addq	%r11, %rsi 
L9:	
	rrmovq	%rsi, %r10
	subq	%r12, %r10
	jle	L10
	ret

# switchv (long rsi)
switchv:
	irmovq	$8, %rdx
	addq	%rdx, %rsp
	irmovq 	$5, %rdx
	rrmovq 	%rsi, %r8
	subq	%rdx, %r8
	jg	L3
	rrmovq	%rsi, %r13
	addq	%r13, %r13
	addq 	%r13, %r13
	addq	%r13, %r13
	mrmovq 	address(%r13),%r9
	rmmovq 	%r9, (%rsp)
	ret

L0:
	irmovq	$0xaaa, %rax
	jmp	jmploc
L1:
	irmovq 	$0xbbb, %rax
	jmp	jmploc
L2:
	irmovq 	$0xccc, %rax
	jmp	jmploc
L3:
	irmovq	$0xddd, %rax
	jmp	jmploc

#Stack starts here and grows to lower addresses
		.pos 0x300
stack:
